$(document).ready(function(){
    console.log("DOM READY");

    $.material.init()    
    initSliders();
    submitForm();

    test();
});

var test = function(){

}

var initSliders = function(){
    //Initializes the sliders: https://refreshless.com/nouislider/

    //-------ROWS-------    
    var slider = document.getElementById('numRow');
    noUiSlider.create(slider, {
	start: 1000,
	range: {
	    'min': 1,
	    'max': 10000
	},
	pips: {
	    mode: 'values',
	    values:  [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000],
	    density: 4
	}
    });

    //-------COLUMNS-------    
    var slider = document.getElementById('numCol');
    noUiSlider.create(slider, {
	start: 5,
	range: {
	    'min': 1,
	    'max': 20
	},
	pips: {
	    mode: 'values',
	    values:  [5, 10, 15, 20],
	    density: 4
	}
    });

    //-------NUM RUNS-------    
    var slider = document.getElementById('numRuns');
    noUiSlider.create(slider, {
	start: 1,
	range: {
	    'min': 1,
	    'max': 10
	},
	pips: {
	    mode: 'values',
	    values:  [2, 4, 6, 8, 10],
	    density: 4
	}
    });

    //-------INTERESTINGNESS THRESHOLD-------    
    var slider = document.getElementById('interThresh');
    noUiSlider.create(slider, {
	start: 9657805,
	range: {
	    'min': 9000000,
	    'max': 10000000
	},
	pips: {
	    mode: 'values',
	    values:  [9200000, 9400000, 9600000, 9800000, 10000000],
	    density: 4
	}
    });

    //-------TOP K-------    
    var slider = document.getElementById('topk');
    noUiSlider.create(slider, {
	start: 100,
	range: {
	    'min': 1,
	    'max': 1000
	},
	pips: {
	    mode: 'values',
	    values:  [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
	    density: 4
	}
    });
    
}

var submitForm = function(){
    var serverPath = "/fastod";
    
    $("#submitButton").click(function(){
	//console.log("submitted");
	var datasetInput = null;
	var rowNum = null;
	var colNum = null;
	var numRuns = null;
	var prune = null;

	
	//------DATASET---------
	$("input[name='dataset']:checked").each(function() {
            datasetInput = this.value;
	    //console.log(datasetInput);
	});

	//------ALGORITHM---------
	$("input[name='algorithm']:checked").each(function() {
            algInput = this.value;
	    //console.log(algInput);
	});
	
	//------ROWS---------
	rowNum = Math.floor(document.getElementById('numRow').noUiSlider.get());
	//console.log(rowNum);

	//------COLUMNS---------
	colNum = Math.floor(document.getElementById('numCol').noUiSlider.get());
	//console.log(colNum);

	//------NUMBER OF RUNS---------
	numRuns = Math.floor(document.getElementById('numRuns').noUiSlider.get());
	//console.log(numRuns);

	//------PRUNE---------
	toPrune = $("#pruneSwitch").is(':checked');
	//console.log(toPrune);

	//------INTERESTINGNESS PRUNE---------
	interPrune = $("#interPruneSwitch").is(':checked');	
	//console.log(interPrune);

	//------INTERESTINGNESS THRESHOLD---------
	interThresh = Math.floor(document.getElementById('interThresh').noUiSlider.get());
	//console.log(interThresh);

	//------TOP K---------
	topk = Math.floor(document.getElementById('topk').noUiSlider.get());
	//console.log(topk);

	//Show loading button
	var $submitButton = $("#submitButton");
	$submitButton.button("loading");
	
	//Send the request to the server
	$.post( serverPath + "/runAlg", {  dataset:datasetInput,
			      algorithm:algInput,
			      rowNum:rowNum,
			      colNum:colNum,
			      numRuns:numRuns,
			      toPrune:toPrune,
			      interPrune:interPrune,
			      interThresh:interThresh,
			      topk:topk
			   })
	//Once the algorithm has finished running
	    .done(function(data){
		handleResults(data);		
		$submitButton.button("reset");
	    });

    });

    $("#cancelButton").click(function(){
	console.log("Cancel clicked");
	$.get(serverPath + "/test");
	$("#submitButton").button("reset");
    });
}

var handleResults = function(data){
    //Handles the data that is handed back from the server after running the algorithm
    //console.log(data);
    
    //Scroll to the display results below
    //$("html, body").animate({ scrollTop: $('#display').offset().top }, 1000);

    //--------------RESPONSE FROM SERVER---------------
    //Obtain the Json Data returned
    var jsonData = JSON.parse(data);

    //Obtain the configuration settings that were used to run the algorithm
    var jsonConfig = jsonData.config;
    //console.log("Configuration:",jsonConfig);

    //Obtain the results from the algorithm
    var jsonResults = jsonData.results;
    //console.log("Algorithm Results:", jsonResults);

    //-----DISPLAY INFORMATION TO THE USER-----
    //Display a well
    var $display = $("#display");
    $display.empty();//clear any existing data
    $display.addClass("well");

    //---CONFIG---
    var $config = $("<p>");
    $config.append($("<h3>").html("Configuration"));
    $config.append($("<p>").html("<b>Dataset: </b>" + jsonConfig.dataset));
    $config.append($("<p>").html("<b>Algorithm: </b>" + jsonConfig.algorithm));
    $config.append($("<p>").html("<b>Number of Rows: </b>" + jsonConfig.rowNum));
    $config.append($("<p>").html("<b>Number of Columns: </b>" + jsonConfig.colNum));
    $config.append($("<p>").html("<b>Number of Runs: </b>" + jsonConfig.numRuns));
    $config.append($("<p>").html("<b>Prune: </b>" + jsonConfig.toPrune));
    $config.append($("<p>").html("<b>Interestingness Prune: </b>" + jsonConfig.interPrune));
    $config.append($("<p>").html("<b>Interestingness Threshold: </b>" + jsonConfig.interThresh));
    $config.append($("<p>").html("<b>Top k: </b>" + jsonConfig.topk));

    //---RESULTS---
    var $results = $("<p>");
    $results.append($("<h3>").html("Results"));
    $results.append($("<p>").html("<b>Run Time: </b>" + jsonResults.runtime + " ms"));
    $results.append($("<p>").html("<b>Number of Rows: </b>" + jsonResults.numRows));
    $results.append($("<p>").html("<b>Number of Columns: </b>" + jsonResults.numCols));
    $results.append($("<p>").html("<b>Number of FDs: </b>" + jsonResults.numFD));
    $results.append($("<p>").html("<b>Number of ODs: </b>" + jsonResults.numOD));    
    //Obtain the FD/OD List - Make a table to store the FD or OD elements in according to their rank
    const FDODTable = new Table(["#", "Order Dependency", "Score"]);
    jsonResults.rankedODFDList.forEach(function(ODFDelement_csv){ //For each OD/FD in the json
	//Each element is delimited by commas as follows: rank, RD/OD, Score
	var ODFDelement_list = ODFDelement_csv.split("$");
	var rank = ODFDelement_list[0];
	var ODFDelement = ODFDelement_list[1];
	var score = ODFDelement_list[2];
	//add the row to the table
	FDODTable.appendRow([rank , ODFDelement, score]); 
    });
    $results.append(FDODTable.table); //Add the table to results
    
    //Finally Append the data to the user
    $display.append("<a id='backButton' class='btn btn-raised btn-success'>Back</a>"); initBackButton();
    $display.append($config);
    $display.append($results);

    //Hide the current parameters and toggle the results displayed
    $display.hide();
    $("#backButton").click();
}

var initBackButton =  function(){
    $("#backButton").click(function(){
	console.log("Back Clicked");
	$("#parameters").toggle();    
	$("#display").toggle();    
    });
}

//Create an html table
class Table{
    constructor(headers){
	//Make the header
	var $tr_header = $("<tr>");
	headers.forEach(function(header){
	    var $th = $("<th>").append(header);
	    $tr_header.append($th);
	});
	var $thead = $("<thead>").append($tr_header);

	//make the table
	var $table = $("<table>");    
	$table.addClass("table table-striped table-hover");
	$table.append($thead);

	//Create an empty body and add it to do the table
	var $tbody = $("<tbody>");
	$table.append($tbody);
	
	this.tbody = $tbody;
	this.table =  $table;
    }

    //Append a row to the table
    appendRow(row){
	//Row is a list of the values added as <td> - must be same length as header
	var $tr = $("<tr>");
	row.forEach(function(data){
	    var $td = $("<td>").append(data);
	    $tr.append($td);
	});
	this.tbody.append($tr);
	//console.log(this.table[0]);
    }
}
